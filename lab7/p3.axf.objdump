
W:/lab7/p3.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 94 0a 00 00 98 0a 00 00 9c 0a 00 00     @...............
  30:	a0 0a 00 00 90 0a 00 00 a4 0a 00 00 a8 0a 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000254 	bl	a2c <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000b90 	.word	0x00000b90

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000fc8 	.word	0x00000fc8

00000124 <__cs3_heap_start_ptr>:
 124:	00000ff0 	.word	0x00000ff0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000fd0 	.word	0x00000fd0
 170:	00000fd3 	.word	0x00000fd3
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000fd0 	.word	0x00000fd0
 1bc:	00000fd0 	.word	0x00000fd0
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000fd0 	.word	0x00000fd0
 200:	00000000 	.word	0x00000000
 204:	00000b34 	.word	0x00000b34

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000b34 	.word	0x00000b34
 250:	00000fd4 	.word	0x00000fd4
 254:	00000b90 	.word	0x00000b90
 258:	00000000 	.word	0x00000000

0000025c <wait_for_vsync>:

// code for subroutines (not shown)
void wait_for_vsync(){
	volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
	register int status;
	*pixel_ctrl_ptr = 1; //start the synchronization process
 25c:	e3033fff 	movw	r3, #16383	; 0x3fff
 260:	e34f3f20 	movt	r3, #65312	; 0xff20
 264:	e3a02001 	mov	r2, #1
 268:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	status = *(pixel_ctrl_ptr + 3);
 26c:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
	while((status & 0x01 ) != 0){
 270:	e3130001 	tst	r3, #1
 274:	012fff1e 	bxeq	lr
		status = *(pixel_ctrl_ptr + 3);
 278:	e3032fff 	movw	r2, #16383	; 0x3fff
 27c:	e34f2f20 	movt	r2, #65312	; 0xff20
 280:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
void wait_for_vsync(){
	volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
	register int status;
	*pixel_ctrl_ptr = 1; //start the synchronization process
	status = *(pixel_ctrl_ptr + 3);
	while((status & 0x01 ) != 0){
 284:	e3130001 	tst	r3, #1
 288:	1afffffc 	bne	280 <wait_for_vsync+0x24>
 28c:	e12fff1e 	bx	lr

00000290 <plot_pixel>:
	}
}

void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
 290:	e3003fec 	movw	r3, #4076	; 0xfec
 294:	e3403000 	movt	r3, #0
 298:	e5933000 	ldr	r3, [r3]
 29c:	e1a00080 	lsl	r0, r0, #1
 2a0:	e0831501 	add	r1, r3, r1, lsl #10
 2a4:	e18120b0 	strh	r2, [r1, r0]
 2a8:	e12fff1e 	bx	lr

000002ac <swap>:
}

void swap(int *xp, int *yp) 
{ 
    int temp = *xp; 
 2ac:	e5903000 	ldr	r3, [r0]
    *xp = *yp; 
 2b0:	e5912000 	ldr	r2, [r1]
 2b4:	e5802000 	str	r2, [r0]
    *yp = temp; 
 2b8:	e5813000 	str	r3, [r1]
 2bc:	e12fff1e 	bx	lr

000002c0 <draw_box>:
} 

void draw_box( int x, int y, int color){
 2c0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 2c4:	e1a07000 	mov	r7, r0
 2c8:	e1a05001 	mov	r5, r1
	plot_pixel(x,y,color);
 2cc:	e6bf4072 	sxth	r4, r2
 2d0:	e1a02004 	mov	r2, r4
 2d4:	ebffffed 	bl	290 <plot_pixel>
	plot_pixel(x+1, y, color);
 2d8:	e2876001 	add	r6, r7, #1
 2dc:	e1a00006 	mov	r0, r6
 2e0:	e1a01005 	mov	r1, r5
 2e4:	e1a02004 	mov	r2, r4
 2e8:	ebffffe8 	bl	290 <plot_pixel>
	plot_pixel(x,y+1,color);
 2ec:	e2855001 	add	r5, r5, #1
 2f0:	e1a00007 	mov	r0, r7
 2f4:	e1a01005 	mov	r1, r5
 2f8:	e1a02004 	mov	r2, r4
 2fc:	ebffffe3 	bl	290 <plot_pixel>
	plot_pixel(x+1, y+1, color); 
 300:	e1a00006 	mov	r0, r6
 304:	e1a01005 	mov	r1, r5
 308:	e1a02004 	mov	r2, r4
 30c:	ebffffdf 	bl	290 <plot_pixel>
 310:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00000314 <draw_line>:
}

void draw_line(int x0, int x1, int y0, int y1, short int line_color){
 314:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 318:	e24dd014 	sub	sp, sp, #20
 31c:	e58d000c 	str	r0, [sp, #12]
 320:	e58d1008 	str	r1, [sp, #8]
 324:	e58d2004 	str	r2, [sp, #4]
 328:	e58d3000 	str	r3, [sp]
 32c:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
	bool steep = abs(y1-y0)>abs(x1-x0);
 330:	e0623003 	rsb	r3, r2, r3
 334:	e3530000 	cmp	r3, #0
 338:	b2633000 	rsblt	r3, r3, #0
 33c:	e0601001 	rsb	r1, r0, r1
 340:	e0217fc1 	eor	r7, r1, r1, asr #31
 344:	e0477fc1 	sub	r7, r7, r1, asr #31
 348:	e1530007 	cmp	r3, r7
 34c:	d3a07000 	movle	r7, #0
 350:	c3a07001 	movgt	r7, #1
	if(steep){
 354:	e3570000 	cmp	r7, #0
 358:	0a000005 	beq	374 <draw_line+0x60>
		swap(&x0,&y0);
 35c:	e28d000c 	add	r0, sp, #12
 360:	e28d1004 	add	r1, sp, #4
 364:	ebffffd0 	bl	2ac <swap>
		swap(&x1,&y1);
 368:	e28d0008 	add	r0, sp, #8
 36c:	e1a0100d 	mov	r1, sp
 370:	ebffffcd 	bl	2ac <swap>
	}

	if(x0>x1){
 374:	e59d3008 	ldr	r3, [sp, #8]
 378:	e59d200c 	ldr	r2, [sp, #12]
 37c:	e1520003 	cmp	r2, r3
 380:	da000005 	ble	39c <draw_line+0x88>
		swap(&x0,&x1);
 384:	e28d000c 	add	r0, sp, #12
 388:	e28d1008 	add	r1, sp, #8
 38c:	ebffffc6 	bl	2ac <swap>
		swap(&y0,&y1);
 390:	e28d0004 	add	r0, sp, #4
 394:	e1a0100d 	mov	r1, sp
 398:	ebffffc3 	bl	2ac <swap>
	}

	int del_x = x1 - x0;
 39c:	e59d3008 	ldr	r3, [sp, #8]
 3a0:	e59d500c 	ldr	r5, [sp, #12]
 3a4:	e0659003 	rsb	r9, r5, r3
	int del_y = abs(y1 -y0);
 3a8:	e59d2000 	ldr	r2, [sp]
 3ac:	e59d6004 	ldr	r6, [sp, #4]
 3b0:	e0668002 	rsb	r8, r6, r2
 3b4:	e3580000 	cmp	r8, #0
 3b8:	b2688000 	rsblt	r8, r8, #0
	int error = -(del_x /2);
 3bc:	e0894fa9 	add	r4, r9, r9, lsr #31
 3c0:	e1a040c4 	asr	r4, r4, #1
 3c4:	e2644000 	rsb	r4, r4, #0
	int x;

	int y_step;

	if(y0 < y1){
		y_step = 1;
 3c8:	e1520006 	cmp	r2, r6
 3cc:	d3e0b000 	mvnle	r11, #0
 3d0:	c3a0b001 	movgt	r11, #1

	else{
		y_step = -1;
	}

	for(x = x0; x <= x1; ++x){
 3d4:	e1530005 	cmp	r3, r5
 3d8:	ba00000e 	blt	418 <draw_line+0x104>
		if(steep){ 
 3dc:	e3570000 	cmp	r7, #0
			plot_pixel(y,x,line_color);
 3e0:	11a00006 	movne	r0, r6
 3e4:	11a01005 	movne	r1, r5
		}
		else { 
			plot_pixel(x,y,line_color);
 3e8:	01a00005 	moveq	r0, r5
 3ec:	01a01006 	moveq	r1, r6
 3f0:	e1a0200a 	mov	r2, r10
 3f4:	ebffffa5 	bl	290 <plot_pixel>
		}
		error = error + del_y;
 3f8:	e0844008 	add	r4, r4, r8

		if(error > 0){
 3fc:	e3540000 	cmp	r4, #0
			y = y + y_step;
 400:	c086600b 	addgt	r6, r6, r11
			error = error - del_x;
 404:	c0694004 	rsbgt	r4, r9, r4

	else{
		y_step = -1;
	}

	for(x = x0; x <= x1; ++x){
 408:	e2855001 	add	r5, r5, #1
 40c:	e59d3008 	ldr	r3, [sp, #8]
 410:	e1530005 	cmp	r3, r5
 414:	aafffff0 	bge	3dc <draw_line+0xc8>
			error = error - del_x;
		}
    	}
    return;

}
 418:	e28dd014 	add	sp, sp, #20
 41c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000420 <clear_screen>:

void clear_screen(){
 420:	e92d4070 	push	{r4, r5, r6, lr}
	int x,y;
	for( x = 0 ; x < 320; ++x){
 424:	e3a05000 	mov	r5, #0
    	}
    return;

}

void clear_screen(){
 428:	e1a06005 	mov	r6, r5
 42c:	ea000009 	b	458 <clear_screen+0x38>
	int x,y;
	for( x = 0 ; x < 320; ++x){
		for( y = 0; y < 240; ++y){
			plot_pixel(x,y,0);
 430:	e1a00005 	mov	r0, r5
 434:	e1a01004 	mov	r1, r4
 438:	e1a02006 	mov	r2, r6
 43c:	ebffff93 	bl	290 <plot_pixel>
}

void clear_screen(){
	int x,y;
	for( x = 0 ; x < 320; ++x){
		for( y = 0; y < 240; ++y){
 440:	e2844001 	add	r4, r4, #1
 444:	e35400f0 	cmp	r4, #240	; 0xf0
 448:	1afffff8 	bne	430 <clear_screen+0x10>

}

void clear_screen(){
	int x,y;
	for( x = 0 ; x < 320; ++x){
 44c:	e2855001 	add	r5, r5, #1
 450:	e3550d05 	cmp	r5, #320	; 0x140
 454:	08bd8070 	popeq	{r4, r5, r6, pc}
    	}
    return;

}

void clear_screen(){
 458:	e1a04006 	mov	r4, r6
 45c:	eafffff3 	b	430 <clear_screen+0x10>

00000460 <main>:
void draw_box( int x, int y, int color);
void draw_line(int x0, int x1, int y0, int y1, short int line_color);
void clear_screen();

int main(void)
{
 460:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 464:	e24dd0b4 	sub	sp, sp, #180	; 0xb4
 468:	e3a04000 	mov	r4, #0
	int x[8], y[8],dx[8], dy[8],color[8]; 

    // initialize location and direction of rectangles(not shown)
	int i;
	for( i = 0; i < 8; i++){
		x[i] = rand()%320;
 46c:	e3067667 	movw	r7, #26215	; 0x6667
 470:	e3467666 	movt	r7, #26214	; 0x6666
		y[i] = rand()%240;
 474:	e3086889 	movw	r6, #34953	; 0x8889
 478:	e3486888 	movt	r6, #34952	; 0x8888
		dx[i] = rand()%2*2-1;
		dy[i] = rand()%2*2-1;
		color[i] = rand()%0xFFFFF; //IN RANGE
 47c:	e3005801 	movw	r5, #2049	; 0x801
 480:	e3485000 	movt	r5, #32768	; 0x8000
	int x[8], y[8],dx[8], dy[8],color[8]; 

    // initialize location and direction of rectangles(not shown)
	int i;
	for( i = 0; i < 8; i++){
		x[i] = rand()%320;
 484:	eb00009b 	bl	6f8 <rand>
 488:	e0c23097 	smull	r3, r2, r7, r0
 48c:	e1a03fc0 	asr	r3, r0, #31
 490:	e06333c2 	rsb	r3, r3, r2, asr #7
 494:	e0833103 	add	r3, r3, r3, lsl #2
 498:	e0400303 	sub	r0, r0, r3, lsl #6
 49c:	e28d3090 	add	r3, sp, #144	; 0x90
 4a0:	e7840003 	str	r0, [r4, r3]
		y[i] = rand()%240;
 4a4:	eb000093 	bl	6f8 <rand>
 4a8:	e0c23096 	smull	r3, r2, r6, r0
 4ac:	e0822000 	add	r2, r2, r0
 4b0:	e1a03fc0 	asr	r3, r0, #31
 4b4:	e06333c2 	rsb	r3, r3, r2, asr #7
 4b8:	e0633203 	rsb	r3, r3, r3, lsl #4
 4bc:	e0400203 	sub	r0, r0, r3, lsl #4
 4c0:	e28d3070 	add	r3, sp, #112	; 0x70
 4c4:	e7840003 	str	r0, [r4, r3]
		dx[i] = rand()%2*2-1;
 4c8:	eb00008a 	bl	6f8 <rand>
 4cc:	e0803fa0 	add	r3, r0, r0, lsr #31
 4d0:	e2033001 	and	r3, r3, #1
 4d4:	e0430fa0 	sub	r0, r3, r0, lsr #31
 4d8:	e1a02080 	lsl	r2, r0, #1
 4dc:	e2422001 	sub	r2, r2, #1
 4e0:	e28d3050 	add	r3, sp, #80	; 0x50
 4e4:	e7842003 	str	r2, [r4, r3]
		dy[i] = rand()%2*2-1;
 4e8:	eb000082 	bl	6f8 <rand>
 4ec:	e0803fa0 	add	r3, r0, r0, lsr #31
 4f0:	e2033001 	and	r3, r3, #1
 4f4:	e0430fa0 	sub	r0, r3, r0, lsr #31
 4f8:	e1a02080 	lsl	r2, r0, #1
 4fc:	e2422001 	sub	r2, r2, #1
 500:	e28d3030 	add	r3, sp, #48	; 0x30
 504:	e7842003 	str	r2, [r4, r3]
		color[i] = rand()%0xFFFFF; //IN RANGE
 508:	eb00007a 	bl	6f8 <rand>
 50c:	e0c23095 	smull	r3, r2, r5, r0
 510:	e0822000 	add	r2, r2, r0
 514:	e1a03fc0 	asr	r3, r0, #31
 518:	e06339c2 	rsb	r3, r3, r2, asr #19
 51c:	e0633a03 	rsb	r3, r3, r3, lsl #20
 520:	e0630000 	rsb	r0, r3, r0
 524:	e28d3010 	add	r3, sp, #16
 528:	e7840003 	str	r0, [r4, r3]
 52c:	e2844004 	add	r4, r4, #4
    // declare other variables
	int x[8], y[8],dx[8], dy[8],color[8]; 

    // initialize location and direction of rectangles(not shown)
	int i;
	for( i = 0; i < 8; i++){
 530:	e3540020 	cmp	r4, #32
 534:	1affffd2 	bne	484 <main+0x24>
		dx[i] = rand()%2*2-1;
		dy[i] = rand()%2*2-1;
		color[i] = rand()%0xFFFFF; //IN RANGE
	}
    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the 
 538:	e3034fff 	movw	r4, #16383	; 0x3fff
 53c:	e34f4f20 	movt	r4, #65312	; 0xff20
 540:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
 544:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
                                        // back buffer
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
 548:	ebffff43 	bl	25c <wait_for_vsync>
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
 54c:	e5143fdf 	ldr	r3, [r4, #-4063]	; 0xfffff021
 550:	e3005fec 	movw	r5, #4076	; 0xfec
 554:	e3405000 	movt	r5, #0
 558:	e5853000 	str	r3, [r5]
    clear_screen(); // pixel_buffer_start points to the pixel buffer
 55c:	ebffffaf 	bl	420 <clear_screen>
    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
 560:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
 564:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
 568:	e5143fdb 	ldr	r3, [r4, #-4059]	; 0xfffff025
 56c:	e5853000 	str	r3, [r5]

    while (1)
    {
        /* Erase any boxes and lines that were drawn in the last iteration */
        clear_screen(); 
 570:	e3a09000 	mov	r9, #0
		}
        // code for updating the locations of boxes (not shown)
		for( i = 0 ; i < 8 ; i++){
			x[i]+= dx[i];
			y[i]+= dy[i];
			if( x[i] == 0 || x[i] == 319 ){
 574:	e300a13f 	movw	r10, #319	; 0x13f
			else if ( y[i] == 0 || y[i] == 239 ){
				dy[i] = -dy[i];
			}
		}
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
 578:	e303bfff 	movw	r11, #16383	; 0x3fff
 57c:	e34fbf20 	movt	r11, #65312	; 0xff20
 580:	e58d500c 	str	r5, [sp, #12]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer

    while (1)
    {
        /* Erase any boxes and lines that were drawn in the last iteration */
        clear_screen(); 
 584:	ebffffa5 	bl	420 <clear_screen>
 588:	e1a05009 	mov	r5, r9

        // code for drawing the boxes and lines (not shown)
		
		for( i = 0 ; i < 8 ; i++){
 58c:	e1a04009 	mov	r4, r9
			draw_line(x[i], x[(i+1)%8], y[i], y[(i+1)%8], color[i]);
 590:	e28d3090 	add	r3, sp, #144	; 0x90
 594:	e7958003 	ldr	r8, [r5, r3]
 598:	e2844001 	add	r4, r4, #1
 59c:	e1a02fc4 	asr	r2, r4, #31
 5a0:	e1a02ea2 	lsr	r2, r2, #29
 5a4:	e0843002 	add	r3, r4, r2
 5a8:	e2033007 	and	r3, r3, #7
 5ac:	e0623003 	rsb	r3, r2, r3
 5b0:	e28d2070 	add	r2, sp, #112	; 0x70
 5b4:	e7957002 	ldr	r7, [r5, r2]
 5b8:	e28d2010 	add	r2, sp, #16
 5bc:	e7956002 	ldr	r6, [r5, r2]
 5c0:	e28d20b0 	add	r2, sp, #176	; 0xb0
 5c4:	e0823103 	add	r3, r2, r3, lsl #2
 5c8:	e5131020 	ldr	r1, [r3, #-32]	; 0xffffffe0
 5cc:	e5133040 	ldr	r3, [r3, #-64]	; 0xffffffc0
 5d0:	e6bf2076 	sxth	r2, r6
 5d4:	e58d2000 	str	r2, [sp]
 5d8:	e1a00008 	mov	r0, r8
 5dc:	e1a02007 	mov	r2, r7
 5e0:	ebffff4b 	bl	314 <draw_line>
			draw_box(x[i],y[i],color[i]);
 5e4:	e1a00008 	mov	r0, r8
 5e8:	e1a01007 	mov	r1, r7
 5ec:	e1a02006 	mov	r2, r6
 5f0:	ebffff32 	bl	2c0 <draw_box>
 5f4:	e2855004 	add	r5, r5, #4
        /* Erase any boxes and lines that were drawn in the last iteration */
        clear_screen(); 

        // code for drawing the boxes and lines (not shown)
		
		for( i = 0 ; i < 8 ; i++){
 5f8:	e3540008 	cmp	r4, #8
 5fc:	1affffe3 	bne	590 <main+0x130>
 600:	e1a03009 	mov	r3, r9
			draw_line(x[i], x[(i+1)%8], y[i], y[(i+1)%8], color[i]);
			draw_box(x[i],y[i],color[i]);
		}
        // code for updating the locations of boxes (not shown)
		for( i = 0 ; i < 8 ; i++){
			x[i]+= dx[i];
 604:	e28d1090 	add	r1, sp, #144	; 0x90
 608:	e7930001 	ldr	r0, [r3, r1]
 60c:	e28d2050 	add	r2, sp, #80	; 0x50
 610:	e7932002 	ldr	r2, [r3, r2]
 614:	e0802002 	add	r2, r0, r2
 618:	e7832001 	str	r2, [r3, r1]
			y[i]+= dy[i];
 61c:	e28d1030 	add	r1, sp, #48	; 0x30
 620:	e793c001 	ldr	r12, [r3, r1]
 624:	e28d0070 	add	r0, sp, #112	; 0x70
 628:	e7931000 	ldr	r1, [r3, r0]
 62c:	e08c1001 	add	r1, r12, r1
 630:	e7831000 	str	r1, [r3, r0]
			if( x[i] == 0 || x[i] == 319 ){
 634:	e3520000 	cmp	r2, #0
 638:	1152000a 	cmpne	r2, r10
 63c:	1a000004 	bne	654 <main+0x1f4>
				dx[i] = -dx[i];
 640:	e28d2050 	add	r2, sp, #80	; 0x50
 644:	e7931002 	ldr	r1, [r3, r2]
 648:	e2611000 	rsb	r1, r1, #0
 64c:	e7831002 	str	r1, [r3, r2]
 650:	ea000004 	b	668 <main+0x208>
			}
			else if ( y[i] == 0 || y[i] == 239 ){
 654:	e3510000 	cmp	r1, #0
 658:	135100ef 	cmpne	r1, #239	; 0xef
				dy[i] = -dy[i];
 65c:	026cc000 	rsbeq	r12, r12, #0
 660:	028d2030 	addeq	r2, sp, #48	; 0x30
 664:	0783c002 	streq	r12, [r3, r2]
 668:	e2833004 	add	r3, r3, #4
		for( i = 0 ; i < 8 ; i++){
			draw_line(x[i], x[(i+1)%8], y[i], y[(i+1)%8], color[i]);
			draw_box(x[i],y[i],color[i]);
		}
        // code for updating the locations of boxes (not shown)
		for( i = 0 ; i < 8 ; i++){
 66c:	e3530020 	cmp	r3, #32
 670:	1affffe3 	bne	604 <main+0x1a4>
			}
			else if ( y[i] == 0 || y[i] == 239 ){
				dy[i] = -dy[i];
			}
		}
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
 674:	ebfffef8 	bl	25c <wait_for_vsync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
 678:	e51b3fdb 	ldr	r3, [r11, #-4059]	; 0xfffff025
 67c:	e59d200c 	ldr	r2, [sp, #12]
 680:	e5823000 	str	r3, [r2]
    }
 684:	eaffffbe 	b	584 <main+0x124>

00000688 <atexit>:
 688:	e1a01000 	mov	r1, r0
 68c:	e3a00000 	mov	r0, #0
 690:	e92d4008 	push	{r3, lr}
 694:	e1a02000 	mov	r2, r0
 698:	e1a03000 	mov	r3, r0
 69c:	eb00002c 	bl	754 <__register_exitproc>
 6a0:	e8bd4008 	pop	{r3, lr}
 6a4:	e12fff1e 	bx	lr

000006a8 <exit>:
 6a8:	e92d4008 	push	{r3, lr}
 6ac:	e3a01000 	mov	r1, #0
 6b0:	e1a04000 	mov	r4, r0
 6b4:	eb000063 	bl	848 <__call_exitprocs>
 6b8:	e59f3018 	ldr	r3, [pc, #24]	; 6d8 <exit+0x30>
 6bc:	e5930000 	ldr	r0, [r3]
 6c0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 6c4:	e3530000 	cmp	r3, #0
 6c8:	11a0e00f 	movne	lr, pc
 6cc:	112fff13 	bxne	r3
 6d0:	e1a00004 	mov	r0, r4
 6d4:	eb0000e7 	bl	a78 <_exit>
 6d8:	00000b38 	.word	0x00000b38

000006dc <srand>:
 6dc:	e59f3010 	ldr	r3, [pc, #16]	; 6f4 <srand+0x18>
 6e0:	e5933000 	ldr	r3, [r3]
 6e4:	e3a02000 	mov	r2, #0
 6e8:	e58300a8 	str	r0, [r3, #168]	; 0xa8
 6ec:	e58320ac 	str	r2, [r3, #172]	; 0xac
 6f0:	e12fff1e 	bx	lr
 6f4:	00000b98 	.word	0x00000b98

000006f8 <rand>:
 6f8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
 6fc:	e59f3044 	ldr	r3, [pc, #68]	; 748 <rand+0x50>
 700:	e593c000 	ldr	r12, [r3]
 704:	e59f4040 	ldr	r4, [pc, #64]	; 74c <rand+0x54>
 708:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
 70c:	e0040492 	mul	r4, r2, r4
 710:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
 714:	e59f3034 	ldr	r3, [pc, #52]	; 750 <rand+0x58>
 718:	e0244193 	mla	r4, r3, r1, r4
 71c:	e0810392 	umull	r0, r1, r2, r3
 720:	e3a02001 	mov	r2, #1
 724:	e0922000 	adds	r2, r2, r0
 728:	e0841001 	add	r1, r4, r1
 72c:	e3a03000 	mov	r3, #0
 730:	e0a33001 	adc	r3, r3, r1
 734:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
 738:	e58c30ac 	str	r3, [r12, #172]	; 0xac
 73c:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
 740:	e8bd0010 	ldmfd	sp!, {r4}
 744:	e12fff1e 	bx	lr
 748:	00000b98 	.word	0x00000b98
 74c:	5851f42d 	.word	0x5851f42d
 750:	4c957f2d 	.word	0x4c957f2d

00000754 <__register_exitproc>:
 754:	e59fc0e4 	ldr	r12, [pc, #228]	; 840 <__register_exitproc+0xec>
 758:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 75c:	e59c4000 	ldr	r4, [r12]
 760:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 764:	e35c0000 	cmp	r12, #0
 768:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 76c:	e59c5004 	ldr	r5, [r12, #4]
 770:	0584c148 	streq	r12, [r4, #328]	; 0x148
 774:	e355001f 	cmp	r5, #31
 778:	e24dd010 	sub	sp, sp, #16
 77c:	e1a06000 	mov	r6, r0
 780:	da000015 	ble	7dc <__register_exitproc+0x88>
 784:	e59f00b8 	ldr	r0, [pc, #184]	; 844 <__register_exitproc+0xf0>
 788:	e3500000 	cmp	r0, #0
 78c:	1a000001 	bne	798 <__register_exitproc+0x44>
 790:	e3e00000 	mvn	r0, #0
 794:	ea000018 	b	7fc <__register_exitproc+0xa8>
 798:	e3a00e19 	mov	r0, #400	; 0x190
 79c:	e58d100c 	str	r1, [sp, #12]
 7a0:	e58d2008 	str	r2, [sp, #8]
 7a4:	e58d3004 	str	r3, [sp, #4]
 7a8:	e320f000 	nop	{0}
 7ac:	e250c000 	subs	r12, r0, #0
 7b0:	e59d100c 	ldr	r1, [sp, #12]
 7b4:	e59d2008 	ldr	r2, [sp, #8]
 7b8:	e59d3004 	ldr	r3, [sp, #4]
 7bc:	0afffff3 	beq	790 <__register_exitproc+0x3c>
 7c0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 7c4:	e3a00000 	mov	r0, #0
 7c8:	e58c0004 	str	r0, [r12, #4]
 7cc:	e58c5000 	str	r5, [r12]
 7d0:	e584c148 	str	r12, [r4, #328]	; 0x148
 7d4:	e58c0188 	str	r0, [r12, #392]	; 0x188
 7d8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 7dc:	e3560000 	cmp	r6, #0
 7e0:	e59c4004 	ldr	r4, [r12, #4]
 7e4:	1a000007 	bne	808 <__register_exitproc+0xb4>
 7e8:	e2843002 	add	r3, r4, #2
 7ec:	e2844001 	add	r4, r4, #1
 7f0:	e78c1103 	str	r1, [r12, r3, lsl #2]
 7f4:	e58c4004 	str	r4, [r12, #4]
 7f8:	e3a00000 	mov	r0, #0
 7fc:	e28dd010 	add	sp, sp, #16
 800:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 804:	e12fff1e 	bx	lr
 808:	e3a00001 	mov	r0, #1
 80c:	e1a00410 	lsl	r0, r0, r4
 810:	e08c8104 	add	r8, r12, r4, lsl #2
 814:	e3560002 	cmp	r6, #2
 818:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 81c:	e5883108 	str	r3, [r8, #264]	; 0x108
 820:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 824:	e1877000 	orr	r7, r7, r0
 828:	01830000 	orreq	r0, r3, r0
 82c:	e1a05008 	mov	r5, r8
 830:	e5882088 	str	r2, [r8, #136]	; 0x88
 834:	e58c7188 	str	r7, [r12, #392]	; 0x188
 838:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 83c:	eaffffe9 	b	7e8 <__register_exitproc+0x94>
 840:	00000b38 	.word	0x00000b38
 844:	00000000 	.word	0x00000000

00000848 <__call_exitprocs>:
 848:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 84c:	e59f3168 	ldr	r3, [pc, #360]	; 9bc <__call_exitprocs+0x174>
 850:	e5933000 	ldr	r3, [r3]
 854:	e24dd014 	sub	sp, sp, #20
 858:	e58d3004 	str	r3, [sp, #4]
 85c:	e2833f52 	add	r3, r3, #328	; 0x148
 860:	e58d0008 	str	r0, [sp, #8]
 864:	e58d300c 	str	r3, [sp, #12]
 868:	e1a07001 	mov	r7, r1
 86c:	e3a08001 	mov	r8, #1
 870:	e59d3004 	ldr	r3, [sp, #4]
 874:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 878:	e3560000 	cmp	r6, #0
 87c:	e59db00c 	ldr	r11, [sp, #12]
 880:	0a000033 	beq	954 <__call_exitprocs+0x10c>
 884:	e5965004 	ldr	r5, [r6, #4]
 888:	e2554001 	subs	r4, r5, #1
 88c:	5286a088 	addpl	r10, r6, #136	; 0x88
 890:	5285501f 	addpl	r5, r5, #31
 894:	508a5105 	addpl	r5, r10, r5, lsl #2
 898:	5a000007 	bpl	8bc <__call_exitprocs+0x74>
 89c:	ea000029 	b	948 <__call_exitprocs+0x100>
 8a0:	e5953000 	ldr	r3, [r5]
 8a4:	e1530007 	cmp	r3, r7
 8a8:	0a000005 	beq	8c4 <__call_exitprocs+0x7c>
 8ac:	e2444001 	sub	r4, r4, #1
 8b0:	e3740001 	cmn	r4, #1
 8b4:	e2455004 	sub	r5, r5, #4
 8b8:	0a000022 	beq	948 <__call_exitprocs+0x100>
 8bc:	e3570000 	cmp	r7, #0
 8c0:	1afffff6 	bne	8a0 <__call_exitprocs+0x58>
 8c4:	e5963004 	ldr	r3, [r6, #4]
 8c8:	e06a2005 	rsb	r2, r10, r5
 8cc:	e2433001 	sub	r3, r3, #1
 8d0:	e0862002 	add	r2, r6, r2
 8d4:	e1530004 	cmp	r3, r4
 8d8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 8dc:	13a01000 	movne	r1, #0
 8e0:	05864004 	streq	r4, [r6, #4]
 8e4:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 8e8:	e3530000 	cmp	r3, #0
 8ec:	0affffee 	beq	8ac <__call_exitprocs+0x64>
 8f0:	e1a02418 	lsl	r2, r8, r4
 8f4:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 8f8:	e1120001 	tst	r2, r1
 8fc:	e5969004 	ldr	r9, [r6, #4]
 900:	0a000016 	beq	960 <__call_exitprocs+0x118>
 904:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 908:	e1120001 	tst	r2, r1
 90c:	1a000016 	bne	96c <__call_exitprocs+0x124>
 910:	e59d0008 	ldr	r0, [sp, #8]
 914:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 918:	e1a0e00f 	mov	lr, pc
 91c:	e12fff13 	bx	r3
 920:	e5963004 	ldr	r3, [r6, #4]
 924:	e1530009 	cmp	r3, r9
 928:	1affffd0 	bne	870 <__call_exitprocs+0x28>
 92c:	e59b3000 	ldr	r3, [r11]
 930:	e1530006 	cmp	r3, r6
 934:	1affffcd 	bne	870 <__call_exitprocs+0x28>
 938:	e2444001 	sub	r4, r4, #1
 93c:	e3740001 	cmn	r4, #1
 940:	e2455004 	sub	r5, r5, #4
 944:	1affffdc 	bne	8bc <__call_exitprocs+0x74>
 948:	e59f1070 	ldr	r1, [pc, #112]	; 9c0 <__call_exitprocs+0x178>
 94c:	e3510000 	cmp	r1, #0
 950:	1a000009 	bne	97c <__call_exitprocs+0x134>
 954:	e28dd014 	add	sp, sp, #20
 958:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 95c:	e12fff1e 	bx	lr
 960:	e1a0e00f 	mov	lr, pc
 964:	e12fff13 	bx	r3
 968:	eaffffec 	b	920 <__call_exitprocs+0xd8>
 96c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 970:	e1a0e00f 	mov	lr, pc
 974:	e12fff13 	bx	r3
 978:	eaffffe8 	b	920 <__call_exitprocs+0xd8>
 97c:	e5963004 	ldr	r3, [r6, #4]
 980:	e3530000 	cmp	r3, #0
 984:	e5963000 	ldr	r3, [r6]
 988:	1a000008 	bne	9b0 <__call_exitprocs+0x168>
 98c:	e3530000 	cmp	r3, #0
 990:	0a000006 	beq	9b0 <__call_exitprocs+0x168>
 994:	e1a00006 	mov	r0, r6
 998:	e58b3000 	str	r3, [r11]
 99c:	e320f000 	nop	{0}
 9a0:	e59b6000 	ldr	r6, [r11]
 9a4:	e3560000 	cmp	r6, #0
 9a8:	1affffb5 	bne	884 <__call_exitprocs+0x3c>
 9ac:	eaffffe8 	b	954 <__call_exitprocs+0x10c>
 9b0:	e1a0b006 	mov	r11, r6
 9b4:	e1a06003 	mov	r6, r3
 9b8:	eafffff9 	b	9a4 <__call_exitprocs+0x15c>
 9bc:	00000b38 	.word	0x00000b38
 9c0:	00000000 	.word	0x00000000

000009c4 <register_fini>:
 9c4:	e92d4008 	push	{r3, lr}
 9c8:	e59f3010 	ldr	r3, [pc, #16]	; 9e0 <register_fini+0x1c>
 9cc:	e3530000 	cmp	r3, #0
 9d0:	159f000c 	ldrne	r0, [pc, #12]	; 9e4 <register_fini+0x20>
 9d4:	1bffff2b 	blne	688 <atexit>
 9d8:	e8bd4008 	pop	{r3, lr}
 9dc:	e12fff1e 	bx	lr
 9e0:	00000b60 	.word	0x00000b60
 9e4:	000009e8 	.word	0x000009e8

000009e8 <__libc_fini_array>:
 9e8:	e92d4038 	push	{r3, r4, r5, lr}
 9ec:	e59f5030 	ldr	r5, [pc, #48]	; a24 <__libc_fini_array+0x3c>
 9f0:	e59f4030 	ldr	r4, [pc, #48]	; a28 <__libc_fini_array+0x40>
 9f4:	e0654004 	rsb	r4, r5, r4
 9f8:	e1b04144 	asrs	r4, r4, #2
 9fc:	10855104 	addne	r5, r5, r4, lsl #2
 a00:	0a000004 	beq	a18 <__libc_fini_array+0x30>
 a04:	e5353004 	ldr	r3, [r5, #-4]!
 a08:	e1a0e00f 	mov	lr, pc
 a0c:	e12fff13 	bx	r3
 a10:	e2544001 	subs	r4, r4, #1
 a14:	1afffffa 	bne	a04 <__libc_fini_array+0x1c>
 a18:	eb000050 	bl	b60 <__libc_fini>
 a1c:	e8bd4038 	pop	{r3, r4, r5, lr}
 a20:	e12fff1e 	bx	lr
 a24:	00000b78 	.word	0x00000b78
 a28:	00000b7c 	.word	0x00000b7c

00000a2c <__cs3_premain>:
 a2c:	e92d4008 	push	{r3, lr}
 a30:	eb00001d 	bl	aac <__libc_init_array>
 a34:	e59f3030 	ldr	r3, [pc, #48]	; a6c <__cs3_premain+0x40>
 a38:	e3530000 	cmp	r3, #0
 a3c:	15930000 	ldrne	r0, [r3]
 a40:	01a00003 	moveq	r0, r3
 a44:	e59f3024 	ldr	r3, [pc, #36]	; a70 <__cs3_premain+0x44>
 a48:	e3530000 	cmp	r3, #0
 a4c:	15931000 	ldrne	r1, [r3]
 a50:	01a01003 	moveq	r1, r3
 a54:	e3a02000 	mov	r2, #0
 a58:	ebfffe80 	bl	460 <main>
 a5c:	e59f3010 	ldr	r3, [pc, #16]	; a74 <__cs3_premain+0x48>
 a60:	e3530000 	cmp	r3, #0
 a64:	1bffff0f 	blne	6a8 <exit>
 a68:	eafffffe 	b	a68 <__cs3_premain+0x3c>
	...
 a74:	000006a8 	.word	0x000006a8

00000a78 <_exit>:
 a78:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 a7c:	e3a00018 	mov	r0, #24
 a80:	e59f1004 	ldr	r1, [pc, #4]	; a8c <_exit+0x14>
 a84:	ef123456 	svc	0x00123456
 a88:	eafffffe 	b	a88 <_exit+0x10>
 a8c:	00020026 	.word	0x00020026

00000a90 <__cs3_isr_interrupt>:
 a90:	eafffffe 	b	a90 <__cs3_isr_interrupt>

00000a94 <__cs3_isr_undef>:
 a94:	eafffffe 	b	a94 <__cs3_isr_undef>

00000a98 <__cs3_isr_swi>:
 a98:	eafffffe 	b	a98 <__cs3_isr_swi>

00000a9c <__cs3_isr_pabort>:
 a9c:	eafffffe 	b	a9c <__cs3_isr_pabort>

00000aa0 <__cs3_isr_dabort>:
 aa0:	eafffffe 	b	aa0 <__cs3_isr_dabort>

00000aa4 <__cs3_isr_irq>:
 aa4:	eafffffe 	b	aa4 <__cs3_isr_irq>

00000aa8 <__cs3_isr_fiq>:
 aa8:	eafffffe 	b	aa8 <__cs3_isr_fiq>

00000aac <__libc_init_array>:
 aac:	e92d4070 	push	{r4, r5, r6, lr}
 ab0:	e59f506c 	ldr	r5, [pc, #108]	; b24 <__libc_init_array+0x78>
 ab4:	e59f606c 	ldr	r6, [pc, #108]	; b28 <__libc_init_array+0x7c>
 ab8:	e0656006 	rsb	r6, r5, r6
 abc:	e1b06146 	asrs	r6, r6, #2
 ac0:	12455004 	subne	r5, r5, #4
 ac4:	13a04000 	movne	r4, #0
 ac8:	0a000005 	beq	ae4 <__libc_init_array+0x38>
 acc:	e5b53004 	ldr	r3, [r5, #4]!
 ad0:	e2844001 	add	r4, r4, #1
 ad4:	e1a0e00f 	mov	lr, pc
 ad8:	e12fff13 	bx	r3
 adc:	e1560004 	cmp	r6, r4
 ae0:	1afffff9 	bne	acc <__libc_init_array+0x20>
 ae4:	e59f5040 	ldr	r5, [pc, #64]	; b2c <__libc_init_array+0x80>
 ae8:	e59f6040 	ldr	r6, [pc, #64]	; b30 <__libc_init_array+0x84>
 aec:	e0656006 	rsb	r6, r5, r6
 af0:	eb000012 	bl	b40 <_init>
 af4:	e1b06146 	asrs	r6, r6, #2
 af8:	12455004 	subne	r5, r5, #4
 afc:	13a04000 	movne	r4, #0
 b00:	0a000005 	beq	b1c <__libc_init_array+0x70>
 b04:	e5b53004 	ldr	r3, [r5, #4]!
 b08:	e2844001 	add	r4, r4, #1
 b0c:	e1a0e00f 	mov	lr, pc
 b10:	e12fff13 	bx	r3
 b14:	e1560004 	cmp	r6, r4
 b18:	1afffff9 	bne	b04 <__libc_init_array+0x58>
 b1c:	e8bd4070 	pop	{r4, r5, r6, lr}
 b20:	e12fff1e 	bx	lr
 b24:	00000b58 	.word	0x00000b58
 b28:	00000b58 	.word	0x00000b58
 b2c:	00000b58 	.word	0x00000b58
 b30:	00000b60 	.word	0x00000b60

Disassembly of section .rodata:

00000b38 <_global_impure_ptr>:
 b38:	00000ba0 00000043                       ....C...

00000b40 <_init>:
 b40:	e1a0c00d 	mov	r12, sp
 b44:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b48:	e24cb004 	sub	r11, r12, #4
 b4c:	e24bd028 	sub	sp, r11, #40	; 0x28
 b50:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b54:	e12fff1e 	bx	lr

00000b58 <__init_array_start>:
 b58:	000009c4 	.word	0x000009c4

00000b5c <__frame_dummy_init_array_entry>:
 b5c:	00000208                                ....

00000b60 <__libc_fini>:
 b60:	e1a0c00d 	mov	r12, sp
 b64:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b68:	e24cb004 	sub	r11, r12, #4
 b6c:	e24bd028 	sub	sp, r11, #40	; 0x28
 b70:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b74:	e12fff1e 	bx	lr

00000b78 <__fini_array_start>:
 b78:	000001c4 	.word	0x000001c4

00000b7c <__cs3_regions>:
	...
 b88:	00000fd0 	.word	0x00000fd0
 b8c:	00000020 	.word	0x00000020
