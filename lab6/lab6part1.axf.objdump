
W:/lab6/lab6part1.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea00000e 	b	40 <__cs3_region_init_ram>
   4:	ea000053 	b	158 <SERVICE_UND>
   8:	ea000053 	b	15c <SERVICE_SVC>
   c:	ea000054 	b	164 <SERVICE_ABT_INST>
  10:	ea000052 	b	160 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000016 	b	78 <SERVICE_IRQ>
  1c:	ea000051 	b	168 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:

                .text    
                .global  _start 

_start: 
	MOV R1, #0b11010010
  40:	e3a010d2 	mov	r1, #210	; 0xd2
	MSR CPSR_c, R1 //lol
  44:	e121f001 	msr	CPSR_c, r1
	LDR SP, =0xFFFFFFFF-3 //SETUP STACK FOR IRQ MODE
  48:	e3e0d003 	mvn	sp, #3
	MOV R1, #0b11010011
  4c:	e3a010d3 	mov	r1, #211	; 0xd3
	MSR CPSR_c, R1
  50:	e121f001 	msr	CPSR_c, r1
	LDR SP, =0x3FFFFFFF-3 //SETUP STACK FOR SVC MODE
  54:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

	BL CONFIG_GIC
  58:	eb000043 	bl	16c <CONFIG_GIC>

	BL CONFIG_KEY
  5c:	eb000001 	bl	68 <CONFIG_KEY>

	MOV R1, #0b01010011 //enter svc mode and turn IRQ mode on
  60:	e3a01053 	mov	r1, #83	; 0x53
	MSR CPSR_c, R1
  64:	e121f001 	msr	CPSR_c, r1

00000068 <CONFIG_KEY>:

CONFIG_KEY:
	LDR R0, =0xFF200050
  68:	e59f018c 	ldr	r0, [pc, #396]	; 1fc <__cs3_region_init_size_ram+0xc>
	MOV R1, #0b00001111
  6c:	e3a0100f 	mov	r1, #15
	STR R1, [R0, #8]
  70:	e5801008 	str	r1, [r0, #8]
	MOV PC, LR
  74:	e1a0f00e 	mov	pc, lr

00000078 <SERVICE_IRQ>:

SERVICE_IRQ:
	PUSH {R0-R7, LR}
  78:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
	LDR R4, =0xFFFEC100
  7c:	e59f417c 	ldr	r4, [pc, #380]	; 200 <__cs3_region_init_size_ram+0x10>
	LDR R5, [R4, #0xC]
  80:	e594500c 	ldr	r5, [r4, #12]
	CMP R5, #73 //check if ID is right
  84:	e3550049 	cmp	r5, #73	; 0x49

00000088 <UNEXPECTED>:
UNEXPECTED: 
	BNE UNEXPECTED
  88:	1afffffe 	bne	88 <UNEXPECTED>
	BL KEY_ISR
  8c:	eb000002 	bl	9c <KEY_ISR>

00000090 <EXIT_IRQ>:
EXIT_IRQ:      
	STR      R5, [R4, #0x10] // write to the End of Interrupt
  90:	e5845010 	str	r5, [r4, #16]
                                         // Register (ICCEOIR)
	POP      {R0-R7, LR}     
  94:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
        SUBS     PC, LR, #4      // return from exception
  98:	e25ef004 	subs	pc, lr, #4

0000009c <KEY_ISR>:

KEY_ISR: 
	LDR R0, =0xFF200050
  9c:	e59f0158 	ldr	r0, [pc, #344]	; 1fc <__cs3_region_init_size_ram+0xc>
	LDR R1, [R0, #12]
  a0:	e590100c 	ldr	r1, [r0, #12]
	STR R1, [R0, #12] //clear edge capture
  a4:	e580100c 	str	r1, [r0, #12]
	AND R2, R1, #0b00000001 //compare and check which keys are pressed
  a8:	e2012001 	and	r2, r1, #1
	CMP R2, #0b00000001
  ac:	e3520001 	cmp	r2, #1
	BEQ KEY_0
  b0:	0a000006 	beq	d0 <KEY_0>
	AND R2, R1, #0b00000010 //compare and check which keys are pressed
  b4:	e2012002 	and	r2, r1, #2
	CMP R2, #0b00000010
  b8:	e3520002 	cmp	r2, #2
	BEQ KEY_1
  bc:	0a00000a 	beq	ec <KEY_1>
	AND R2, R1, #0b00000100 //compare and check which keys are pressed
  c0:	e2012004 	and	r2, r1, #4
	CMP R2, #0b00000100
  c4:	e3520004 	cmp	r2, #4
	BEQ KEY_2
  c8:	0a00000f 	beq	10c <KEY_2>
	B KEY_3
  cc:	ea000016 	b	12c <KEY_3>

000000d0 <KEY_0>:

KEY_0: 
	LDR R0, =0xFF200020
  d0:	e59f012c 	ldr	r0, [pc, #300]	; 204 <__cs3_region_init_size_ram+0x14>
	MOV R1, #0b00111111 //printing '0' on hex to check what's the hex previously 
  d4:	e3a0103f 	mov	r1, #63	; 0x3f
	LDR R2, [R0]
  d8:	e5902000 	ldr	r2, [r0]
	CMP R2, R1 //if R1 and previous hex is the same, display nothing
  dc:	e1520001 	cmp	r2, r1
	BEQ DISPLAY_NOTHING
  e0:	0a000019 	beq	14c <DISPLAY_NOTHING>
	STR R1, [R0] //if not, store it
  e4:	e5801000 	str	r1, [r0]
	MOV PC, LR
  e8:	e1a0f00e 	mov	pc, lr

000000ec <KEY_1>:
KEY_1: 
	LDR R0, =0xFF200020
  ec:	e59f0110 	ldr	r0, [pc, #272]	; 204 <__cs3_region_init_size_ram+0x14>
	MOV R1, #0b00000110 //printing '1' on hex to check what's the hex previously 
  f0:	e3a01006 	mov	r1, #6
	LDRB R2, [R0, #1]
  f4:	e5d02001 	ldrb	r2, [r0, #1]
	CMP R2, R1 //if R1 and previous hex is the same, display nothing
  f8:	e1520001 	cmp	r2, r1
	BEQ DISPLAY_NOTHING
  fc:	0a000012 	beq	14c <DISPLAY_NOTHING>
	LSL R1, #8
 100:	e1a01401 	lsl	r1, r1, #8
	STR R1, [R0] //if not, store it
 104:	e5801000 	str	r1, [r0]
	MOV PC, LR
 108:	e1a0f00e 	mov	pc, lr

0000010c <KEY_2>:
KEY_2: 
	LDR R0, =0xFF200020
 10c:	e59f00f0 	ldr	r0, [pc, #240]	; 204 <__cs3_region_init_size_ram+0x14>
	MOV R1, #0b01011011 //printing '2' on hex to check what's the hex previously 
 110:	e3a0105b 	mov	r1, #91	; 0x5b
	LDRB R2, [R0, #2]
 114:	e5d02002 	ldrb	r2, [r0, #2]
	CMP R2, R1 //if R1 and previous hex is the same, display nothing
 118:	e1520001 	cmp	r2, r1
	BEQ DISPLAY_NOTHING
 11c:	0a00000a 	beq	14c <DISPLAY_NOTHING>
	LSL R1, #16
 120:	e1a01801 	lsl	r1, r1, #16
	STR R1, [R0] //if not, store it
 124:	e5801000 	str	r1, [r0]
	MOV PC, LR
 128:	e1a0f00e 	mov	pc, lr

0000012c <KEY_3>:
KEY_3: 
	LDR R0, =0xFF200020
 12c:	e59f00d0 	ldr	r0, [pc, #208]	; 204 <__cs3_region_init_size_ram+0x14>
	MOV R1, #0b01001111 //printing '3' on hex to check what's the hex previously 
 130:	e3a0104f 	mov	r1, #79	; 0x4f
	LDRB R2, [R0, #3]
 134:	e5d02003 	ldrb	r2, [r0, #3]
	CMP R2, R1 //if R1 and previous hex is the same, display nothing
 138:	e1520001 	cmp	r2, r1
	BEQ DISPLAY_NOTHING
 13c:	0a000002 	beq	14c <DISPLAY_NOTHING>
	LSL R1, #24
 140:	e1a01c01 	lsl	r1, r1, #24
	STR R1, [R0] //if not, store it
 144:	e5801000 	str	r1, [r0]
	MOV PC, LR
 148:	e1a0f00e 	mov	pc, lr

0000014c <DISPLAY_NOTHING>:
DISPLAY_NOTHING:
	MOV R1, #0
 14c:	e3a01000 	mov	r1, #0
	STR R1, [R0]
 150:	e5801000 	str	r1, [r0]
	MOV PC, LR
 154:	e1a0f00e 	mov	pc, lr

00000158 <SERVICE_UND>:

/* Undefined instructions */
SERVICE_UND:                                
                    B   SERVICE_UND         
 158:	eafffffe 	b	158 <SERVICE_UND>

0000015c <SERVICE_SVC>:
/* Software interrupts */
SERVICE_SVC:                                
                    B   SERVICE_SVC         
 15c:	eafffffe 	b	15c <SERVICE_SVC>

00000160 <SERVICE_ABT_DATA>:
/* Aborted data reads */
SERVICE_ABT_DATA:                           
                    B   SERVICE_ABT_DATA    
 160:	eafffffe 	b	160 <SERVICE_ABT_DATA>

00000164 <SERVICE_ABT_INST>:
/* Aborted instruction fetch */
SERVICE_ABT_INST:                           
                    B   SERVICE_ABT_INST    
 164:	eafffffe 	b	164 <SERVICE_ABT_INST>

00000168 <SERVICE_FIQ>:
SERVICE_FIQ:                                
                    B   SERVICE_FIQ         
 168:	eafffffe 	b	168 <SERVICE_FIQ>

0000016c <CONFIG_GIC>:
/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
				.global	CONFIG_GIC
CONFIG_GIC:
				PUSH		{LR}
 16c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    			/* Configure the A9 Private Timer interrupt, FPGA KEYs, and FPGA Timer
				/* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
    			MOV		R0, #MPCORE_PRIV_TIMER_IRQ
 170:	e3a0001d 	mov	r0, #29
    			MOV		R1, #CPU0
 174:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 178:	eb00000d 	bl	1b4 <CONFIG_INTERRUPT>
    			MOV		R0, #INTERVAL_TIMER_IRQ
 17c:	e3a00048 	mov	r0, #72	; 0x48
    			MOV		R1, #CPU0
 180:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 184:	eb00000a 	bl	1b4 <CONFIG_INTERRUPT>
    			MOV		R0, #KEYS_IRQ
 188:	e3a00049 	mov	r0, #73	; 0x49
    			MOV		R1, #CPU0
 18c:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 190:	eb000007 	bl	1b4 <CONFIG_INTERRUPT>

				/* configure the GIC CPU interface */
    			LDR		R0, =0xFFFEC100		// base address of CPU interface
 194:	e59f0064 	ldr	r0, [pc, #100]	; 200 <__cs3_region_init_size_ram+0x10>
    			/* Set Interrupt Priority Mask Register (ICCPMR) */
    			LDR		R1, =0xFFFF 			// enable interrupts of all priorities levels
 198:	e59f1068 	ldr	r1, [pc, #104]	; 208 <__cs3_region_init_size_ram+0x18>
    			STR		R1, [R0, #0x04]
 19c:	e5801004 	str	r1, [r0, #4]
    			/* Set the enable bit in the CPU Interface Control Register (ICCICR). This bit
				 * allows interrupts to be forwarded to the CPU(s) */
    			MOV		R1, #1
 1a0:	e3a01001 	mov	r1, #1
    			STR		R1, [R0]
 1a4:	e5801000 	str	r1, [r0]
    
    			/* Set the enable bit in the Distributor Control Register (ICDDCR). This bit
				 * allows the distributor to forward interrupts to the CPU interface(s) */
    			LDR		R0, =0xFFFED000
 1a8:	e59f005c 	ldr	r0, [pc, #92]	; 20c <__cs3_region_init_size_ram+0x1c>
    			STR		R1, [R0]    
 1ac:	e5801000 	str	r1, [r0]
    
    			POP     	{PC}
 1b0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000001b4 <CONFIG_INTERRUPT>:
 * other registers in the GIC
 * Arguments: R0 = interrupt ID, N
 *            R1 = CPU target
*/
CONFIG_INTERRUPT:
    			PUSH		{R4-R5, LR}
 1b4:	e92d4030 	push	{r4, r5, lr}
    
    			/* Configure Interrupt Set-Enable Registers (ICDISERn). 
				 * reg_offset = (integer_div(N / 32) * 4
				 * value = 1 << (N mod 32) */
    			LSR		R4, R0, #3							// calculate reg_offset
 1b8:	e1a041a0 	lsr	r4, r0, #3
    			BIC		R4, R4, #3							// R4 = reg_offset
 1bc:	e3c44003 	bic	r4, r4, #3
				LDR		R2, =0xFFFED100
 1c0:	e59f2048 	ldr	r2, [pc, #72]	; 210 <__cs3_region_init_size_ram+0x20>
				ADD		R4, R2, R4							// R4 = address of ICDISER
 1c4:	e0824004 	add	r4, r2, r4
    
    			AND		R2, R0, #0x1F   					// N mod 32
 1c8:	e200201f 	and	r2, r0, #31
				MOV		R5, #1								// enable
 1cc:	e3a05001 	mov	r5, #1
    			LSL		R2, R5, R2							// R2 = value
 1d0:	e1a02215 	lsl	r2, r5, r2

				/* now that we have the register address (R4) and value (R2), we need to set the
				 * correct bit in the GIC register */
    			LDR		R3, [R4]								// read current register value
 1d4:	e5943000 	ldr	r3, [r4]
    			ORR		R3, R3, R2							// set the enable bit
 1d8:	e1833002 	orr	r3, r3, r2
    			STR		R3, [R4]								// store the new register value
 1dc:	e5843000 	str	r3, [r4]

    			/* Configure Interrupt Processor Targets Register (ICDIPTRn)
     			 * reg_offset = integer_div(N / 4) * 4
     			 * index = N mod 4 */
    			BIC		R4, R0, #3							// R4 = reg_offset
 1e0:	e3c04003 	bic	r4, r0, #3
				LDR		R2, =0xFFFED800
 1e4:	e59f2028 	ldr	r2, [pc, #40]	; 214 <__cs3_region_init_size_ram+0x24>
				ADD		R4, R2, R4							// R4 = word address of ICDIPTR
 1e8:	e0824004 	add	r4, r2, r4
    			AND		R2, R0, #0x3						// N mod 4
 1ec:	e2002003 	and	r2, r0, #3
				ADD		R4, R2, R4							// R4 = byte address in ICDIPTR
 1f0:	e0824004 	add	r4, r2, r4

				/* now that we have the register address (R4) and value (R2), write to (only)
				 * the appropriate byte */
				STRB		R1, [R4]
 1f4:	e5c41000 	strb	r1, [r4]
    
    			POP		{R4-R5, PC}
 1f8:	e8bd8030 	pop	{r4, r5, pc}
 1fc:	ff200050 	.word	0xff200050
 200:	fffec100 	.word	0xfffec100
 204:	ff200020 	.word	0xff200020
 208:	0000ffff 	.word	0x0000ffff
 20c:	fffed000 	.word	0xfffed000
 210:	fffed100 	.word	0xfffed100
 214:	fffed800 	.word	0xfffed800
