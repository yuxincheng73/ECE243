
W:/lab4/part4.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
/* code for Part III (not shown) */

          .text                   // executable code follows
          .global _start     
		  
_start:   MOV	  R5, #0		  // initialize longest 1s to 0
   0:	e3a05000 	mov	r5, #0
		  MOV	  R6, #0		  // initialize longest 0s 
   4:	e3a06000 	mov	r6, #0
		  MOV     R7, #0		  // initialize longest alternate
   8:	e3a07000 	mov	r7, #0
		  
		  MOV	  R8, #0		  // initialize current 1s to 0
   c:	e3a08000 	mov	r8, #0
		  MOV	  R9, #0		  // initialize current 0s 
  10:	e3a09000 	mov	r9, #0
		  MOV     R10, #0		  // initialize current alternate
  14:	e3a0a000 	mov	r10, #0
		  
		  MOV     R3, #TEST_NUM   // load the data word ...
  18:	e3a03f6e 	mov	r3, #440	; 0x1b8

0000001c <MAIN>:


MAIN:	  CMP	  R5, R8          // check if last 1s has longer string
  1c:	e1550008 	cmp	r5, r8
		  MOVLE	  R5, R8 		  // 
  20:	d1a05008 	movle	r5, r8
		  CMP	  R6, R9          // check if last 0s has longer string
  24:	e1560009 	cmp	r6, r9
		  MOVLE	  R6, R9 		  // 
  28:	d1a06009 	movle	r6, r9
		  CMP	  R7, R10         // check if last alternate has longer string
  2c:	e157000a 	cmp	r7, r10
		  MOVLE	  R7, R10 		  // 
  30:	d1a0700a 	movle	r7, r10
		   

          LDR     R1, [R3]        // move current word into R1
  34:	e5931000 	ldr	r1, [r3]
		  CMP	  R1, #0          // checks if loaded data word was 0, ends program if true
  38:	e3510000 	cmp	r1, #0
		  BEQ	  DISPLAY
  3c:	0a000023 	beq	d0 <DISPLAY>
		  MOV     R8, #0		  // reset 1s counter
  40:	e3a08000 	mov	r8, #0
		  MOV     R9, #0 	      // reset 0s counter
  44:	e3a09000 	mov	r9, #0
		  MOV     R10,#0          // reset alternate counter
  48:	e3a0a000 	mov	r10, #0
		  B       ONES
  4c:	eaffffff 	b	50 <ONES>

00000050 <ONES>:
		  
ONES:     CMP     R1, #0          // loop until the data contains no more 1's
  50:	e3510000 	cmp	r1, #0
          BEQ     ZEROPREP             
  54:	0a000003 	beq	68 <ZEROPREP>
          LSR     R2, R1, #1      // perform SHIFT, followed by AND
  58:	e1a020a1 	lsr	r2, r1, #1
          AND     R1, R1, R2      
  5c:	e0011002 	and	r1, r1, r2
          ADD     R8, #1          // count the string length so far
  60:	e2888001 	add	r8, r8, #1
          B       ONES  
  64:	eafffff9 	b	50 <ONES>

00000068 <ZEROPREP>:

ZEROPREP: LDR	  R1, [R3]		  // restore current word
  68:	e5931000 	ldr	r1, [r3]
		  MVN     R1, R1		  // invert the word
  6c:	e1e01001 	mvn	r1, r1
		  B		  ZEROS
  70:	eaffffff 	b	74 <ZEROS>

00000074 <ZEROS>:
		  
ZEROS:	  CMP     R1, #0          // loop until the data contains no more 1's
  74:	e3510000 	cmp	r1, #0
          BEQ     ALTERNATEPREP             
  78:	0a000003 	beq	8c <ALTERNATEPREP>
          LSR     R2, R1, #1      // perform SHIFT, followed by AND
  7c:	e1a020a1 	lsr	r2, r1, #1
          AND     R1, R1, R2      
  80:	e0011002 	and	r1, r1, r2
          ADD     R9, #1          // count the string length so far
  84:	e2899001 	add	r9, r9, #1
          B       ZEROS
  88:	eafffff9 	b	74 <ZEROS>

0000008c <ALTERNATEPREP>:
		  
ALTERNATEPREP:    LDR R1, [R3]	  // restore current word
  8c:	e5931000 	ldr	r1, [r3]
				  MOV R11, #XOR_CHECK
  90:	e3a0be1e 	mov	r11, #480	; 0x1e0
				  LDR R11, [R11]
  94:	e59bb000 	ldr	r11, [r11]
				  CMP R1, R11 	  // check MSB of word
  98:	e151000b 	cmp	r1, r11
				  MOV R11, #XOR_CONSTANT_MSB_ONE     // if MSB is equal to 1 (no z flag)
  9c:	e3a0bf7a 	mov	r11, #488	; 0x1e8
				  MOVEQ R11, #XOR_CONSTANT_MSB_ONE  // if MSB is 1 but (with z flag) 
  a0:	03a0bf7a 	moveq	r11, #488	; 0x1e8
				  MOVLT R11, #XOR_CONSTANT_MSB_ZERO // if MSB is equal to 0
  a4:	b3a0bf79 	movlt	r11, #484	; 0x1e4
 
				  LDR R11, [R11] 
  a8:	e59bb000 	ldr	r11, [r11]
				  EOR R1, R11
  ac:	e021100b 	eor	r1, r1, r11

000000b0 <ALTERNATE>:
				  
ALTERNATE:		  CMP     R1, #0          // loop until the data contains no more 1's
  b0:	e3510000 	cmp	r1, #0
				  ADDEQ	  R3, #4		  // move forward in list
  b4:	02833004 	addeq	r3, r3, #4
				  BEQ     MAIN             
  b8:	0affffd7 	beq	1c <MAIN>
				  LSR     R2, R1, #1      // perform SHIFT, followed by AND
  bc:	e1a020a1 	lsr	r2, r1, #1
				  AND     R1, R1, R2      
  c0:	e0011002 	and	r1, r1, r2
				  ADD     R10, #1          // count the string length so far
  c4:	e28aa001 	add	r10, r10, #1
				  B       ALTERNATE
  c8:	eafffff8 	b	b0 <ALTERNATE>

000000cc <END>:


		  
END:      B       END  
  cc:	eafffffe 	b	cc <END>

000000d0 <DISPLAY>:


/* Display R5 on HEX1-0, R6 on HEX3-2 and R7 on HEX5-4 */
DISPLAY:    LDR     R8, =0xFF200020 // base address of HEX3-HEX0
  d0:	e59f8114 	ldr	r8, [pc, #276]	; 1ec <XOR_CONSTANT_MSB_ONE+0x4>
            MOV     R0, R5          // display R5 on HEX1-0
  d4:	e1a00005 	mov	r0, r5
            BL      DIVIDE          // ones digit will be in R0; tens
  d8:	eb000025 	bl	174 <DIVIDE>
                                    // digit in R1
            MOV     R9, R1          // save the tens digit
  dc:	e1a09001 	mov	r9, r1
            BL      SEG7_CODE       
  e0:	eb00001c 	bl	158 <SEG7_CODE>
            MOV     R4, R0          // save bit code
  e4:	e1a04000 	mov	r4, r0
            MOV     R0, R9          // retrieve the tens digit, get bit
  e8:	e1a00009 	mov	r0, r9
                                    
            BL      SEG7_CODE       
  ec:	eb000019 	bl	158 <SEG7_CODE>
            LSL     R0, #8			
  f0:	e1a00400 	lsl	r0, r0, #8
            ORR     R4, R0
  f4:	e1844000 	orr	r4, r4, r0
			
			

			
			MOV		R0, R6			//display R6 on HEX3-2
  f8:	e1a00006 	mov	r0, r6
			BL		DIVIDE
  fc:	eb00001c 	bl	174 <DIVIDE>
            MOV     R9, R1          // save the tens digit
 100:	e1a09001 	mov	r9, r1
            BL      SEG7_CODE
 104:	eb000013 	bl	158 <SEG7_CODE>
			LSL		R0, #16			// index proper address
 108:	e1a00800 	lsl	r0, r0, #16
            ORR     R4, R0          // save bit code
 10c:	e1844000 	orr	r4, r4, r0
            MOV     R0, R9          // retrieve the tens digit, get bit
 110:	e1a00009 	mov	r0, r9
                                    
            BL      SEG7_CODE       
 114:	eb00000f 	bl	158 <SEG7_CODE>
            LSL     R0, #24			// index proper address
 118:	e1a00c00 	lsl	r0, r0, #24
            ORR     R4, R0			 
 11c:	e1844000 	orr	r4, r4, r0
			
            
            STR     R4, [R8]        // display the numbers from R6 and R5
 120:	e5884000 	str	r4, [r8]
            LDR     R8, =0xFF200030 // base address of HEX5-HEX4
 124:	e59f80c4 	ldr	r8, [pc, #196]	; 1f0 <XOR_CONSTANT_MSB_ONE+0x8>
			
           
			MOV     R4, #0
 128:	e3a04000 	mov	r4, #0
            MOV     R0, R7          // display R7 on HEX6-5
 12c:	e1a00007 	mov	r0, r7
            BL      DIVIDE          // ones digit will be in R0; tens
 130:	eb00000f 	bl	174 <DIVIDE>
                                    // digit in R1
            MOV     R9, R1          // save the tens digit
 134:	e1a09001 	mov	r9, r1
            BL      SEG7_CODE       
 138:	eb000006 	bl	158 <SEG7_CODE>
            MOV     R4, R0          // save bit code
 13c:	e1a04000 	mov	r4, r0
            MOV     R0, R9          // retrieve the tens digit, get bit
 140:	e1a00009 	mov	r0, r9
                                    
            BL      SEG7_CODE       
 144:	eb000003 	bl	158 <SEG7_CODE>
            LSL     R0, #8			
 148:	e1a00400 	lsl	r0, r0, #8
            ORR     R4, R0			
 14c:	e1844000 	orr	r4, r4, r0
			
            STR     R4, [R8]        // display the number from R7
 150:	e5884000 	str	r4, [r8]
			
			B		END
 154:	eaffffdc 	b	cc <END>

00000158 <SEG7_CODE>:
/* Subroutine to convert the digits from 0 to 9 to be shown on a HEX display.
 *    Parameters: R0 = the decimal value of the digit to be displayed
 *    Returns: R0 = bit patterm to be written to the HEX display
 */

SEG7_CODE:  MOV     R1, #BIT_CODES  
 158:	e3a01f5a 	mov	r1, #360	; 0x168
            ADD     R1, R0         // index into the BIT_CODES "array"
 15c:	e0811000 	add	r1, r1, r0
            LDRB    R0, [R1]       // load the bit pattern (to be returned)
 160:	e5d10000 	ldrb	r0, [r1]
            MOV     PC, LR              
 164:	e1a0f00e 	mov	pc, lr

00000168 <BIT_CODES>:
 168:	4f5b063f 	.word	0x4f5b063f
 16c:	077d6d66 	.word	0x077d6d66
 170:	0000677f 	.word	0x0000677f

00000174 <DIVIDE>:
			
/* Subroutine divide
 *  Parameters: R0 = number to be converted from binary to decimal
 *  Returns: R0 = ones digit, R1 = tens digit
 */
DIVIDE:     SUB	   R13, #4 //saving registers
 174:	e24dd004 	sub	sp, sp, #4
			STR    R2, [R13]
 178:	e58d2000 	str	r2, [sp]
			SUB	   R13, #4
 17c:	e24dd004 	sub	sp, sp, #4
			STR	   R6, [R13]
 180:	e58d6000 	str	r6, [sp]
			MOV    R2, #0
 184:	e3a02000 	mov	r2, #0
			MOV	   R6, #10 // pointing to divisor
 188:	e3a0600a 	mov	r6, #10

0000018c <TEN>:
TEN:		CMP    R0, R6
 18c:	e1500006 	cmp	r0, r6
            BLT    DIV_END // remainder < divisor
 190:	ba000002 	blt	1a0 <DIV_END>
            SUB    R0, R6
 194:	e0400006 	sub	r0, r0, r6
            ADD    R2, #1
 198:	e2822001 	add	r2, r2, #1
            B      TEN
 19c:	eafffffa 	b	18c <TEN>

000001a0 <DIV_END>:
DIV_END:    MOV    R1, R2     // quotient in R1 (remainder in R0)
 1a0:	e1a01002 	mov	r1, r2
			LDR	   R6, [R13] // restoring registers
 1a4:	e59d6000 	ldr	r6, [sp]
			ADD	   R13, #4
 1a8:	e28dd004 	add	sp, sp, #4
			LDR	   R2, [R13]
 1ac:	e59d2000 	ldr	r2, [sp]
			ADD	   R13, #4
 1b0:	e28dd004 	add	sp, sp, #4
            MOV    PC, LR
 1b4:	e1a0f00e 	mov	pc, lr

000001b8 <TEST_NUM>:
 1b8:	103fe00f 	.word	0x103fe00f
 1bc:	0009e3ff 	.word	0x0009e3ff
 1c0:	07ffffff 	.word	0x07ffffff
 1c4:	03f80fff 	.word	0x03f80fff
 1c8:	000b80ff 	.word	0x000b80ff
 1cc:	00ff5507 	.word	0x00ff5507
 1d0:	7fffffff 	.word	0x7fffffff
 1d4:	c0000000 	.word	0xc0000000
 1d8:	aaaaaaa0 	.word	0xaaaaaaa0
 1dc:	00000000 	.word	0x00000000

000001e0 <XOR_CHECK>:
 1e0:	80000000 	.word	0x80000000

000001e4 <XOR_CONSTANT_MSB_ZERO>:
 1e4:	aaaaaaaa 	.word	0xaaaaaaaa

000001e8 <XOR_CONSTANT_MSB_ONE>:
 1e8:	55555555 	.word	0x55555555
 1ec:	ff200020 	.word	0xff200020
 1f0:	ff200030 	.word	0xff200030
